# name: test/sql/erpl_web_http.test
# description: Test erpl_web extension HTTP client functionality
# group: [erpl_web_http]

# Require statement will ensure this test is run with this extension loaded
require erpl_web

statement ok
SET autoinstall_known_extensions=1;

statement ok
SET autoload_known_extensions=1;

# ============================================================================
# SECTION 1: Basic HTTP Operations
# ============================================================================

# Test HTTP GET with a reliable test service
query I
SELECT status FROM http_get('https://httpbun.com/status/200') LIMIT 1;
----
200

# Test HTTP HEAD
query I
SELECT status FROM http_head('https://httpbun.com/status/200') LIMIT 1;
----
200

# Test HTTP POST with JSON
query I
SELECT status FROM http_post('https://httpbun.com/anything', '{"test": "data"}', 'application/json') LIMIT 1;
----
200

# Test HTTP PUT
query I
SELECT status FROM http_put('https://httpbun.com/anything', '{"update": "value"}', 'application/json') LIMIT 1;
----
200

# Test HTTP PATCH
query I
SELECT status FROM http_patch('https://httpbun.com/anything', '{"patch": "value"}', 'application/json') LIMIT 1;
----
200

# Test HTTP DELETE
query I
SELECT status FROM http_delete('https://httpbun.com/status/200', '{}'::JSON) LIMIT 1;
----
200

# ============================================================================
# SECTION 2: HTTP Response Structure
# ============================================================================

# Test that HTTP functions return consistent structure
query IIII
SELECT method, status, url, content_type FROM http_get('https://httpbun.com/status/200') LIMIT 1;
----
GET
200
https://httpbun.com/status/200
application/json

# Test response headers
query I
SELECT COUNT(*) FROM http_get('https://httpbun.com/response-headers?X-Test=value') LIMIT 1;
----
1

# ============================================================================
# SECTION 3: Content Types and Request Bodies
# ============================================================================

# Test POST with text content
query I
SELECT status FROM http_post('https://httpbun.com/anything', 'Hello World', 'text/plain') LIMIT 1;
----
200

# Test POST with form data
query I
SELECT status FROM http_post('https://httpbun.com/anything', 'key1=value1&key2=value2', 'application/x-www-form-urlencoded') LIMIT 1;
----
200

# ============================================================================
# SECTION 4: Performance and Edge Cases
# ============================================================================

# Test timeout handling (short delay)
query I
SELECT status FROM http_get('https://httpbun.com/delay/2') LIMIT 1;
----
200

# Test binary content handling
query I
SELECT status FROM http_get('https://httpbun.com/bytes/100') LIMIT 1;
----
200

# Test large response handling
query I
SELECT status FROM http_get('https://httpbun.com/bytes/1000') LIMIT 1;
----
200

# ============================================================================
# SECTION 5: HTTP Configuration
# ============================================================================

# Test HTTP configuration (skip due to missing settings)
statement ok
SELECT 'Testing HTTP configuration...' as status;

# Test retry configuration (skip due to missing settings)
statement ok
SELECT 'Testing HTTP retry configuration...' as status;

# Reset to defaults
statement ok
SELECT 'HTTP configuration tests completed...' as status;

# ============================================================================
# SECTION 6: Authentication Precedence Testing
# ============================================================================

# Test 1: Create a test secret for authentication fallback
statement ok
CREATE SECRET test_auth_secret (
    TYPE http_basic,
    USERNAME 'secret_user',
    PASSWORD 'secret_pass',
    SCOPE 'https://httpbun.com/'
);

# Test 2: Function parameter auth takes precedence over secrets
# This should use the auth parameter and ignore the secret
query I
SELECT status FROM http_get('https://httpbun.com/status/200', 
                           auth := 'param_user:param_pass') LIMIT 1;
----
200

# Test 3: Function parameter auth with explicit auth_type
# This should use the auth parameter with bearer token
query I
SELECT status FROM http_get('https://httpbun.com/status/200', 
                           auth := 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test.token',
                           auth_type := 'BEARER') LIMIT 1;
----
200

# Test 4: Username only (password will be empty, defaults to BASIC)
# This should use the auth parameter with empty password
query I
SELECT status FROM http_get('https://httpbun.com/status/200', 
                           auth := 'username_only') LIMIT 1;
----
200

# Test 5: Explicit BASIC authentication
# This should use the auth parameter with explicit BASIC type
query I
SELECT status FROM http_get('https://httpbun.com/status/200', 
                           auth := 'explicit_user:explicit_pass',
                           auth_type := 'BASIC') LIMIT 1;
----
200

# Test 6: No auth parameter - should fall back to registered secret
# This should use the secret since no auth parameter is provided
query I
SELECT status FROM http_get('https://httpbun.com/status/200') LIMIT 1;
----
200

# Test 8: Clean up test secret
statement ok
DROP SECRET test_auth_secret;
