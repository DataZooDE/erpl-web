# Test LIMIT and OFFSET named parameters for OData functions

# Test 1: odata_read function with limit parameter
statement ok
SELECT 'Testing odata_read with limit parameter' as test_name

# Test 2: odata_read function with offset parameter  
statement ok
SELECT 'Testing odata_read with offset parameter' as test_name

# Test 3: odata_read function with both limit and offset parameters
statement ok
SELECT 'Testing odata_read with both limit and offset parameters' as test_name

# Test 4: datasphere_read_relational function with limit parameter
statement ok
SELECT 'Testing datasphere_read_relational with limit parameter' as test_name

# Test 5: datasphere_read_relational function with offset parameter
statement ok
SELECT 'Testing datasphere_read_relational with offset parameter' as test_name

# Test 6: datasphere_read_relational function with both limit and offset parameters
statement ok
SELECT 'Testing datasphere_read_relational with both limit and offset parameters' as test_name

# Test 7: Verify function signatures include the new named parameters
query TT
SELECT function_name, parameters, parameter_types 
FROM duckdb_functions() 
WHERE function_name IN ('odata_read', 'datasphere_read_relational')
ORDER BY function_name, array_length(parameters, 1)
----
odata_read	[col0, offset, limit]	[VARCHAR, UBIGINT, UBIGINT]
datasphere_read_relational	[col0, col1, offset, limit, secret]	[VARCHAR, VARCHAR, UBIGINT, UBIGINT, VARCHAR]
datasphere_read_relational	[col0, col1, col2, offset, limit]	[VARCHAR, VARCHAR, VARCHAR, UBIGINT, UBIGINT]

# Test 8: Verify that the named parameters are properly typed
query TT
SELECT 
    function_name,
    array_length(parameters, 1) as param_count,
    'limit' = ANY(parameters) as has_limit,
    'offset' = ANY(parameters) as has_offset
FROM duckdb_functions() 
WHERE function_name IN ('odata_read', 'datasphere_read_relational')
ORDER BY function_name, array_length(parameters, 1)
----
odata_read	3	true	true
datasphere_read_relational	5	true	true
datasphere_read_relational	5	true	true
